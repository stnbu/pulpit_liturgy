#!/usr/bin/env python3

import math
from manim import *
from point import Point as ECPoint
from curve import EllipticCurve
from field import PrimeGaloisField

P: int = 11
field = PrimeGaloisField(prime=P)
A: int = 2
B: int = 2
galois11 = EllipticCurve(a=A, b=B, field=field)
#I = ECPoint(x=None, y=None, curve=galois11)
#G = ECPoint(x=3, y=6, curve=galois11)
# order of group generated by "G" over the "galois11" finite-field EC.
#N = 12
#assert N * G == I

extent = 12

import math
def get_top_half(x):
    return math.sqrt((x) ** 3 + (A * (x)) + B)

#(y) ** 2,
from decimal import Decimal
def get_curve_graph(passing_through=None):
    dx = 0
    dy = 0
    if passing_through is not None:
        dx, dy = passing_through
    dy = 0
    return ImplicitFunction(
        #lambda x, y: (x-dx) ** 3 + (A * (x-dx)) + B - (y-dy) ** 2,
        x_range=[-extent, extent],
        y_range=[-extent, extent],
        stroke_width=10,
        color=GREEN
    )

import astoroid
class EC(Scene):
    def construct(self):
        plane = NumberPlane(
            [-extent, extent, 1],
            [-extent, extent, 1],
        )
        self.add(plane)

        points = []
        modulus = Decimal(P)
        for i, n in enumerate(astoroid.fdrange(0, 150, 0.1)):
            points.append((n, get_top_half(n)))
        modular_points = [[astoroid.ModularNumber(Decimal(n), modulus) for n in point] for point in points]
        dotpacity = 0.5
        for j, line in enumerate(astoroid.get_lines(modular_points)):
            modular_porabola = VGroup(color=astoroid.get_ith_color(j), stroke_width=0.3)
            modular_porabola.set_points_as_corners([astoroid.to_xyz(l) for l in line])
            self.add(modular_porabola)
        # end stuff

        return
        point = G
        while True:
            x = 0 if point.x is None else point.x.value
            y = 0 if point.y is None else point.y.value
            #print("Circle(radius=0.2, color=RED, fill_opacity=1).move_to(plane.coords_to_point(%d, %d))" % (x,y))
            dot = Circle(radius=0.2, color=RED, fill_opacity=1).move_to(plane.coords_to_point(x, y))
            self.add(dot, get_curve_graph([x, y]))
            point = point + G
            if point == I:
                break

        self.add(Circle(radius=0.6, color=BLUE, fill_opacity=1).move_to(plane.coords_to_point(30, 55)))
        self.add(Circle(radius=0.6, color=BLUE, fill_opacity=1).move_to(plane.coords_to_point(5, 21)))

if __name__ == "__main__":
    config.frame_height = extent
    config.frame_width = extent
    #config.quality = "low_quality"
    scene = EC()
    scene.render()
